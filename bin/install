#!/usr/bin/env node

var program = require('commander');
var async = require('async');
var crypto = require('crypto');
var config = require('../config');
var mongoclient = require('mongodb').MongoClient;
var fs = require('fs');
var db;

program
    .version(config.taracotjs)
    .option('-m, --mongo [url]', 'Specify MongoDB connect URL')
    .option('-r, --redishost [host]', 'Specify Redis host')
    .option('-j, --redisport [port]', 'Specify Redis port')
    .option('-p, --port [port]', 'Specify TaracotJS server port')
    .option('-u, --update', 'Version update (no database insertions)')
    .option('-i, --uid [uid]', 'Set user ID')
    .option('-g, --gid [gid]', 'Set group ID')
    .option('-s, --silent', 'Don\'t ask anything (perform silently)')
    .parse(process.argv);

var mongo_url = program.mongo || config.mongo.url;
var redis_host = program.redishost || config.redis.host;
var redis_port = program.redisport || config.redis.port;
var port = program.port || config.port;
var uid = program.uid || config.uid;
var gid = program.gid || config.gid;

async.series([
        function(callback) {
            console.log("This script will guide you with TaracotJS basic installation steps.\n");
            console.log("Database connection is required.");
            console.log("Current MongoDB URL: " + mongo_url + "\n");
            if (program.silent) return callback();
            program.confirm('Continue? ', function(ok) {
                if (ok) {
                    callback();
                } else {
                    console.log("\n\nAborted");
                    process.exit(code = 0);
                }
            });
        },
        function(callback) {
            mongoclient.connect(mongo_url, config.mongo_options, function(err, _db) {
                if (err) {
                    console.log("\nCould not connect to the MongoDB. Please check config.js");
                    console.log(err);
                    process.exit(1);
                }
                console.log("\nConnected to MongoDB\n");
                db = _db;
                callback();
            });
        },
        function(callback) {
            if (mongo_url != config.mongo.url || redis_host != config.redis.host || redis_port != config.redis.port || port != config.port || gid != config.gid || uid != config.uid) {
                config.mongo.url = mongo_url;
                config.redis.host = redis_host;
                config.redis.port = redis_port;
                config.port = port;
                config.uid = uid;
                config.gid = gid;
                console.log("Saving changes to config.js file\n");
                fs.writeFile('../config.js', 'var config = ' + JSON.stringify(config, null, "\t") + ";\n\nmodule.exports = config;", function(err) {
                    if (err) {
                        console.log("\nCould not save config.js file. Check your permissions");
                        console.log(err);
                        process.exit(1);
                    }
                    console.log("... success\n");
                    callback();
                });
            } else {
                callback();
            }
        },
        function(callback) {
            if (program.update) return callback();
            if (program.silent) return callback();
            program.confirm('Installation script can update secrets and salt. Continue? ', function(ok) {
                if (ok) {
                    config.cookie.secret = generateId(32);
                    config.session.secret = generateId(32);
                    config.salt = generateId(64);
                    fs.writeFile('../config.js', 'var config = ' + JSON.stringify(config, null, "\t") + ";\n\nmodule.exports = config;", function(err) {
                        if (err) {
                            console.log("\nCould not save config.js file. Check your permissions");
                            console.log(err);
                            process.exit(1);
                        }
                        console.log("... success");
                        callback();
                    });
                } else {
                    console.log("\nNote: it's important to set these values for security purposes!");
                    callback();
                }
            });
        },
        function(callback) {
            console.log("\nCreating collection: users\n");
            db.createCollection('users', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            db.collection('users').remove({
                username: 'admin'
            }, function() {
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nCreating default user account\n");
            var md5 = crypto.createHash('md5');
            var password_md5 = md5.update(config.salt + '.admin').digest('hex');
            db.collection('users').insert({
                username: 'admin',
                username_auth: 'admin',
                email: 'default@taracot.org',
                realname: 'Website Administrator',
                status: 2,
                regdate: Date.now(),
                password: password_md5
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: users\n");
            ensure_indexes('users', ['username', 'email', 'realname', 'status'], null, null, function() {
                ensure_indexes('users', ['act_code', 'res_code', 'username_auth', 'password', 'username_vk_uid'], null, true, function() {
                    console.log("... success");
                    callback();
                });
            });
        },
        function(callback) {
            console.log("\nCreating collection: settings\n");
            db.createCollection('settings', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default setting (site_title, en)...\n");
            db.collection('settings').insert({
                oname: 'site_title',
                ovalue: 'Taracot JS',
                olang: 'en'
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default setting (site_title, ru)...\n");
            db.collection('settings').insert({
                oname: 'site_title',
                ovalue: 'Taracot JS',
                olang: 'ru'
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default setting (site_keywords, en)...\n");
            db.collection('settings').insert({
                oname: 'site_keywords',
                ovalue: 'taracot, taracotjs, node.js, mongodb, redis, cms, content management system',
                olang: 'en'
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default setting (site_keywords, ru)...\n");
            db.collection('settings').insert({
                oname: 'site_keywords',
                ovalue: 'taracot, taracotjs, node.js, mongodb, redis, cms, система управления сайтами',
                olang: 'ru'
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default setting (site_description, en)...\n");
            db.collection('settings').insert({
                oname: 'site_description',
                ovalue: 'TaracotJS is a simple content management system (CMS) written in JavaScript on both client and server sides (using Node). It\'s free, open source and is running on multiple platrforms including Linux, MacOS and Windows. All modern browsers are supported.',
                olang: 'en'
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default setting (site_description, ru)...\n");
            db.collection('settings').insert({
                oname: 'site_description',
                ovalue: 'TaracotJS - простая система управления сайтами (CMS), написанная на JavaScript и построенная на технологиях Node.JS, MongoDB и Redis.',
                olang: 'ru'
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default setting (blog_mode)...\n");
            db.collection('settings').insert({
                oname: 'blog_mode',
                ovalue: 'moderation',
                olang: ''
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default setting (blog_areas)...\n");
            db.collection('settings').insert({
                oname: 'blog_areas',
                ovalue: '[{"id":"test","en":"Test blog area","ru":"Тестовый раздел"}]',
                olang: ''
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: settings\n");
            ensure_indexes('settings', ['oname', 'olang'], null, null, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: pages\n");
            db.createCollection('pages', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default page (en)...\n");
            db.collection('pages').insert({
                ptitle: 'Default page',
                pfolder: '/',
                pfilename: '',
                plang: 'en',
                playout: config.layouts.default,
                pfolder_id: 'j1_1',
                pkeywords: 'sample, keywords, here',
                pdesc: 'This is the sample page',
                pcontent: 'The installation is complete ;-)'
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default page (ru)...\n");
            db.collection('pages').insert({
                ptitle: 'Главная страница',
                pfolder: '/',
                pfilename: '',
                plang: 'ru',
                playout: config.layouts.default,
                pfolder_id: 'j1_1',
                pkeywords: 'образец, ключевых, слов',
                pdesc: 'Тестовая страница',
                pcontent: 'Инсталляция успешно выполнена ;-)'
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding feedback page (en)...\n");
            db.collection('pages').insert({
                "ptitle": "Feedback",
                "pfilename": "feedback",
                "pfolder": "/",
                "pfolder_id": "j1_1",
                "plang": "en",
                "playout": "index",
                "pkeywords": "",
                "pdesc": "",
                "pcontent": "<h1>Feedback</h1>\n\n<p>Please fill the following form to leave your feedback.</p>\n\n<p>!{root.blocks_sync.feedback(&#39;&quot;lang&quot;:&quot;&#39;+root.current_lang+&#39;&quot;#&quot;data&quot;:(([&quot;id&quot;:&quot;name&quot;#&quot;label_en&quot;:&quot;Your name&quot;#&quot;label_ru&quot;:&quot;Ваше имя&quot;#&quot;type&quot;:&quot;text&quot;#&quot;class&quot;:&quot;uk-form-width-large&quot;#&quot;mandatory&quot;:&quot;true&quot;]#[&quot;id&quot;:&quot;email&quot;#&quot;label_en&quot;:&quot;Your e-mail&quot;#&quot;label_ru&quot;:&quot;Ваш e-mail&quot;#&quot;type&quot;:&quot;email&quot;#&quot;class&quot;:&quot;uk-form-width-medium&quot;]#[&quot;id&quot;:&quot;reason&quot;#&quot;label_en&quot;:&quot;Do you like TaracotJS?&quot;#&quot;label_ru&quot;:&quot;Вам нравится система?&quot;#&quot;type&quot;:&quot;select&quot;#&quot;class&quot;:&quot;uk-form-width-small&quot;#&quot;values&quot;:(([&quot;value_en&quot;:&quot;Yes&quot;#&quot;value_ru&quot;:&quot;Да&quot;]#[&quot;value_en&quot;:&quot;No&quot;#&quot;value_ru&quot;:&quot;Нет&quot;]))]#[&quot;id&quot;:&quot;message&quot;#&quot;label_en&quot;:&quot;Message&quot;#&quot;label_ru&quot;:&quot;Сообщение&quot;#&quot;type&quot;:&quot;textarea&quot;#&quot;class&quot;:&quot;uk-form-width-large&quot;#&quot;mandatory&quot;:&quot;true&quot;]))&#39;)}</p>\n"
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding feedback page (ru)...\n");
            db.collection('pages').insert({
                "ptitle": "Feedback",
                "pfilename": "feedback",
                "pfolder": "/",
                "pfolder_id": "j1_1",
                "plang": "ru",
                "playout": "index",
                "pkeywords": "",
                "pdesc": "",
                "pcontent": "<h1>Обратная связь</h1>\n\n<p>Пожалуйста, используйте форму, расположенную ниже, для обратной связи.</p>\n\n<p>!{root.blocks_sync.feedback(&#39;&quot;lang&quot;:&quot;&#39;+root.current_lang+&#39;&quot;#&quot;data&quot;:(([&quot;id&quot;:&quot;name&quot;#&quot;label_en&quot;:&quot;Your name&quot;#&quot;label_ru&quot;:&quot;Ваше имя&quot;#&quot;type&quot;:&quot;text&quot;#&quot;class&quot;:&quot;uk-form-width-large&quot;#&quot;mandatory&quot;:&quot;true&quot;]#[&quot;id&quot;:&quot;email&quot;#&quot;label_en&quot;:&quot;Your e-mail&quot;#&quot;label_ru&quot;:&quot;Ваш e-mail&quot;#&quot;type&quot;:&quot;email&quot;#&quot;class&quot;:&quot;uk-form-width-medium&quot;]#[&quot;id&quot;:&quot;reason&quot;#&quot;label_en&quot;:&quot;Do you like TaracotJS?&quot;#&quot;label_ru&quot;:&quot;Вам нравится система?&quot;#&quot;type&quot;:&quot;select&quot;#&quot;class&quot;:&quot;uk-form-width-small&quot;#&quot;values&quot;:(([&quot;value_en&quot;:&quot;Yes&quot;#&quot;value_ru&quot;:&quot;Да&quot;]#[&quot;value_en&quot;:&quot;No&quot;#&quot;value_ru&quot;:&quot;Нет&quot;]))]#[&quot;id&quot;:&quot;message&quot;#&quot;label_en&quot;:&quot;Message&quot;#&quot;label_ru&quot;:&quot;Сообщение&quot;#&quot;type&quot;:&quot;textarea&quot;#&quot;class&quot;:&quot;uk-form-width-large&quot;#&quot;mandatory&quot;:&quot;true&quot;]))&#39;)}</p>\n"
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: pages\n");
            ensure_indexes('pages', ['pfolder', 'pfilename', 'plang', 'ptitle'], null, null, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: pages_folders\n");
            db.createCollection('pages_folders', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default folder tree for pages module...\n");
            db.collection('pages_folders').insert({
                oname: 'folders_json',
                ovalue: '[{"id":"j1_1","text":"/","data":null,"parent":"#","type":"root"}]'
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: pages_folders\n");
            ensure_indexes('pages_folders', ['oname'], null, null, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: parts\n");
            db.createCollection('parts', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to parts collection (en)...\n");
            db.collection('parts').insert({
                pname: 'test',
                plang: 'en',
                pvalue: 'Just a test example'
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to parts collection (ru)...\n");
            db.collection('parts').insert({
                pname: 'test',
                plang: 'ru',
                pvalue: 'Тестовый элемент'
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: parts\n");
            ensure_indexes('parts', ['pname', 'plang'], null, true, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: menu\n");
            db.createCollection('pages_folders', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to menu collection (en)...\n");
            db.collection('menu').insert({
                "lang": "en",
                "menu_source": "<li id=\"taracot_menu_1408371943280\" class=\"uk-nestable-list-item\"><div class=\"uk-nestable-item\"><div class=\"uk-nestable-handle\"></div><div data-nestable-action=\"toggle\"></div>&nbsp;<span class=\"uk-nestable-item-text\">Home</span>&nbsp;(<a href=\"/\" class=\"uk-nestable-item-url\">/</a>)&nbsp;&nbsp;&nbsp;<button class=\"uk-button uk-button-small taracot-btn-menu-edit\"><i class=\"uk-icon-edit\"></i></button>&nbsp;<button class=\"uk-button uk-button-small uk-button-danger taracot-btn-menu-delete\"><i class=\"uk-icon-trash-o\"></i></button></div></li><li id=\"taracot_menu_1413378176219\" class=\"uk-nestable-list-item\"><div class=\"uk-nestable-item\"><div class=\"uk-nestable-handle\"></div><div data-nestable-action=\"toggle\"></div>&nbsp;<span class=\"uk-nestable-item-text\">Blog feed</span>&nbsp;(<a href=\"/blog\" class=\"uk-nestable-item-url\">/blog</a>)&nbsp;&nbsp;&nbsp;<button class=\"uk-button uk-button-small taracot-btn-menu-edit\"><i class=\"uk-icon-edit\"></i></button>&nbsp;<button class=\"uk-button uk-button-small uk-button-danger taracot-btn-menu-delete\"><i class=\"uk-icon-trash-o\"></i></button></div></li><li id=\"taracot_menu_1413378845428\" class=\"uk-nestable-list-item\"><div class=\"uk-nestable-item\"><div class=\"uk-nestable-handle\"></div><div data-nestable-action=\"toggle\"></div>&nbsp;<span class=\"uk-nestable-item-text\">New post</span>&nbsp;(<a href=\"/blog/post\" class=\"uk-nestable-item-url\">/blog/post</a>)&nbsp;&nbsp;&nbsp;<button class=\"uk-button uk-button-small taracot-btn-menu-edit\"><i class=\"uk-icon-edit\"></i></button>&nbsp;<button class=\"uk-button uk-button-small uk-button-danger taracot-btn-menu-delete\"><i class=\"uk-icon-trash-o\"></i></button></div></li><li id=\"taracot_menu_1413378186758\" class=\"uk-nestable-list-item\"><div class=\"uk-nestable-item\"><div class=\"uk-nestable-handle\"></div><div data-nestable-action=\"toggle\"></div>&nbsp;<span class=\"uk-nestable-item-text\">Social</span>&nbsp;(<a href=\"/social\" class=\"uk-nestable-item-url\">/social</a>)&nbsp;&nbsp;&nbsp;<button class=\"uk-button uk-button-small taracot-btn-menu-edit\"><i class=\"uk-icon-edit\"></i></button>&nbsp;<button class=\"uk-button uk-button-small uk-button-danger taracot-btn-menu-delete\"><i class=\"uk-icon-trash-o\"></i></button></div></li><li id=\"taracot_menu_1420029808206\" class=\"uk-nestable-list-item\"><div class=\"uk-nestable-item\"><div class=\"uk-nestable-handle\"></div><div data-nestable-action=\"toggle\"></div>&nbsp;<span class=\"uk-nestable-item-text\">Shop</span>&nbsp;(<a href=\"/catalog\" class=\"uk-nestable-item-url\">/catalog</a>)&nbsp;&nbsp;&nbsp;<button class=\"uk-button uk-button-small taracot-btn-menu-edit\"><i class=\"uk-icon-edit\"></i></button>&nbsp;<button class=\"uk-button uk-button-small uk-button-danger taracot-btn-menu-delete\"><i class=\"uk-icon-trash-o\"></i></button></div></li><li id=\"taracot_menu_1414680280546\" class=\"uk-nestable-list-item\"><div class=\"uk-nestable-item\"><div class=\"uk-nestable-handle\"></div><div data-nestable-action=\"toggle\"></div>&nbsp;<span class=\"uk-nestable-item-text\">Feedback</span>&nbsp;(<a href=\"/feedback\" class=\"uk-nestable-item-url\">/feedback</a>)&nbsp;&nbsp;&nbsp;<button class=\"uk-button uk-button-small taracot-btn-menu-edit\"><i class=\"uk-icon-edit\"></i></button>&nbsp;<button class=\"uk-button uk-button-small uk-button-danger taracot-btn-menu-delete\"><i class=\"uk-icon-trash-o\"></i></button></div></li>",
                "menu_raw": "<ul><li class=\"taracot_menu_item_\"><a href=\"/\">Home</a></li><li class=\"taracot_menu_item_blog\"><a href=\"/blog\">Blog feed</a></li><li class=\"taracot_menu_item_blog_post\"><a href=\"/blog/post\">New post</a></li><li class=\"taracot_menu_item_social\"><a href=\"/social\">Social</a></li><li class=\"taracot_menu_item_catalog\"><a href=\"/catalog\">Shop</a></li><li class=\"taracot_menu_item_feedback\"><a href=\"/feedback\">Feedback</a></li></ul>",
                "menu_uikit": "<nav class=\"uk-navbar\"><ul class=\"uk-navbar-nav\"><li class=\"taracot_menu_item_\"><a href=\"/\">Home</a></li><li class=\"taracot_menu_item_blog\"><a href=\"/blog\">Blog feed</a></li><li class=\"taracot_menu_item_blog_post\"><a href=\"/blog/post\">New post</a></li><li class=\"taracot_menu_item_social\"><a href=\"/social\">Social</a></li><li class=\"taracot_menu_item_catalog\"><a href=\"/catalog\">Shop</a></li><li class=\"taracot_menu_item_feedback\"><a href=\"/feedback\">Feedback</a></li></ul></nav>",
                "menu_uikit_offcanvas": "<li class=\"taracot_menu_item_\"><a href=\"/\">Home</a></li><li class=\"taracot_menu_item_blog\"><a href=\"/blog\">Blog feed</a></li><li class=\"taracot_menu_item_blog_post\"><a href=\"/blog/post\">New post</a></li><li class=\"taracot_menu_item_social\"><a href=\"/social\">Social</a></li><li class=\"taracot_menu_item_catalog\"><a href=\"/catalog\">Shop</a></li><li class=\"taracot_menu_item_feedback\"><a href=\"/feedback\">Feedback</a></li>"
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to menu collection (ru)...\n");
            db.collection('menu').insert({
                "lang": "ru",
                "menu_source": "<li id=\"taracot_menu_1415889121113\" class=\"uk-nestable-list-item\"><div class=\"uk-nestable-item\"><div class=\"uk-nestable-handle\"></div><div data-nestable-action=\"toggle\"></div>&nbsp;<span class=\"uk-nestable-item-text\">Главная</span>&nbsp;(<a href=\"/\" class=\"uk-nestable-item-url\">/</a>)&nbsp;&nbsp;&nbsp;<button class=\"uk-button uk-button-small taracot-btn-menu-edit\"><i class=\"uk-icon-edit\"></i></button>&nbsp;<button class=\"uk-button uk-button-small uk-button-danger taracot-btn-menu-delete\"><i class=\"uk-icon-trash-o\"></i></button></div></li><li id=\"taracot_menu_1415889130223\" class=\"uk-nestable-list-item\"><div class=\"uk-nestable-item\"><div class=\"uk-nestable-handle\"></div><div data-nestable-action=\"toggle\"></div>&nbsp;<span class=\"uk-nestable-item-text\">Блог</span>&nbsp;(<a href=\"/blog\" class=\"uk-nestable-item-url\">/blog</a>)&nbsp;&nbsp;&nbsp;<button class=\"uk-button uk-button-small taracot-btn-menu-edit\"><i class=\"uk-icon-edit\"></i></button>&nbsp;<button class=\"uk-button uk-button-small uk-button-danger taracot-btn-menu-delete\"><i class=\"uk-icon-trash-o\"></i></button></div></li><li id=\"taracot_menu_1415889142706\" class=\"uk-nestable-list-item\"><div class=\"uk-nestable-item\"><div class=\"uk-nestable-handle\"></div><div data-nestable-action=\"toggle\"></div>&nbsp;<span class=\"uk-nestable-item-text\">Новый пост</span>&nbsp;(<a href=\"/blog/post\" class=\"uk-nestable-item-url\">/blog/post</a>)&nbsp;&nbsp;&nbsp;<button class=\"uk-button uk-button-small taracot-btn-menu-edit\"><i class=\"uk-icon-edit\"></i></button>&nbsp;<button class=\"uk-button uk-button-small uk-button-danger taracot-btn-menu-delete\"><i class=\"uk-icon-trash-o\"></i></button></div></li><li id=\"taracot_menu_1415889169227\" class=\"uk-nestable-list-item\"><div class=\"uk-nestable-item\"><div class=\"uk-nestable-handle\"></div><div data-nestable-action=\"toggle\"></div>&nbsp;<span class=\"uk-nestable-item-text\">Обратная связь</span>&nbsp;(<a href=\"/feedback\" class=\"uk-nestable-item-url\">/feedback</a>)&nbsp;&nbsp;&nbsp;<button class=\"uk-button uk-button-small taracot-btn-menu-edit\"><i class=\"uk-icon-edit\"></i></button>&nbsp;<button class=\"uk-button uk-button-small uk-button-danger taracot-btn-menu-delete\"><i class=\"uk-icon-trash-o\"></i></button></div></li>",
                "menu_raw": "<ul><li class=\"taracot_menu_item_\"><a href=\"/\">Главная</a></li><li class=\"taracot_menu_item_blog\"><a href=\"/blog\">Блог</a></li><li class=\"taracot_menu_item_blog_post\"><a href=\"/blog/post\">Новый пост</a></li><li class=\"taracot_menu_item_feedback\"><a href=\"/feedback\">Обратная связь</a></li></ul>",
                "menu_uikit": "<nav class=\"uk-navbar\"><ul class=\"uk-navbar-nav\"><li class=\"taracot_menu_item_\"><a href=\"/\">Главная</a></li><li class=\"taracot_menu_item_blog\"><a href=\"/blog\">Блог</a></li><li class=\"taracot_menu_item_blog_post\"><a href=\"/blog/post\">Новый пост</a></li><li class=\"taracot_menu_item_feedback\"><a href=\"/feedback\">Обратная связь</a></li></ul></nav>",
                "menu_uikit_offcanvas": "<li class=\"taracot_menu_item_\"><a href=\"/\">Главная</a></li><li class=\"taracot_menu_item_blog\"><a href=\"/blog\">Блог</a></li><li class=\"taracot_menu_item_blog_post\"><a href=\"/blog/post\">Новый пост</a></li><li class=\"taracot_menu_item_feedback\"><a href=\"/feedback\">Обратная связь</a></li>"
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: menu\n");
            ensure_indexes('menu', ['lang'], null, true, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: statistics\n");
            db.createCollection('statistics', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: statistics\n");
            ensure_indexes('statistics', ['day'], null, true, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: search_index\n");
            db.createCollection('search_index', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: search_index\n");
            ensure_indexes('search_index', ['swords', 'space', 'item_id'], null, true, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: blog\n");
            db.createCollection('blog', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: blog\n");
            ensure_indexes('blog', ['post_timestamp'], null, null, function() {
                ensure_indexes('blog', ['post_moderated', 'post_filtered', 'post_draft', 'post_user_id', 'post_keywords', 'post_area', 'post_lang'], null, true, function() {
                    console.log("... success");
                    callback();
                });
            });
        },
        function(callback) {
            console.log("\nCreating collection: blog_comments\n");
            db.createCollection('blog_comments', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: blog_comments\n");
            ensure_indexes('blog_comments', ['post_id', 'comment_timestamp'], null, true, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: invites\n");
            db.createCollection('invites', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: invites\n");
            ensure_indexes('invites', ['invdate', 'invcode', 'invused'], null, null, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: social_friends\n");
            db.createCollection('social_friends', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: social_friends\n");
            ensure_indexes('social_friends', ['u1', 'u2', 'friends'], null, true, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: social_conversations\n");
            db.createCollection('social_conversations', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: social_conversations\n");
            ensure_indexes('social_conversations', ['u1', 'u2'], null, true, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: social_messages\n");
            db.createCollection('social_messages', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: social_messages\n");
            ensure_indexes('social_messages', ['last_tstamp'], null, null, function() {
                ensure_indexes('social_messages', ['u1', 'u2', 'tstamp'], null, true, function() {
                    console.log("... success");
                    callback();
                });
            });
        },
        function(callback) {
            console.log("\nCreating collection: warehouse\n");
            db.createCollection('warehouse', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: warehouse\n");
            ensure_indexes('warehouse', ['pfolder', 'pfilename', 'plang', 'ptitle'], null, null, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to warehouse collection (1/6)...\n");
            db.collection('warehouse').insert({
                "ptitle": "8Gb Smart Buy Cobra",
                "pshortdesc": "Compact and cheap USB stick by Smart Buy",
                "pfilename": "TDS00001",
                "pcategory": "/storage/usb_flash",
                "pcategory_id": "j1_3",
                "plang": "en",
                "pkeywords": "",
                "pdesc": "",
                "pimages": ["58b8d5b8ced7332f435668b15b6eb48a"],
                "pchars": [{
                    "id": "capacity_gb",
                    "val": 8
                }, {
                    "id": "interface",
                    "val": "USB 2.0"
                }, {
                    "id": "color",
                    "val": "red"
                }],
                "pcontent": "<p>Compact and robust USB stick.</p>\n",
                "pamount": 100,
                "pamount_unlimited": 0,
                "pprice": 300,
                "pweight": 0.02,
                "pcurs": "rur"
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to warehouse collection (2/6)...\n");
            db.collection('warehouse').insert({
                "ptitle": "16Gb Silicon Power I-Series",
                "pshortdesc": "16Gb Silicon Power I-Series, SP016GBUF2M01V1K, Flash USB, black",
                "pfilename": "TDS00002",
                "pcategory": "/storage/usb_flash",
                "pcategory_id": "j1_3",
                "plang": "en",
                "pkeywords": "",
                "pdesc": "",
                "pimages": ["139312b8960a51f7a601e01c9eb39c71", "a438ec7015acf1da5c13cb649c1afcf0"],
                "pamount": 50,
                "pamount_unlimited": 0,
                "pprice": 700,
                "pweight": 0.1,
                "pcurs": "rur",
                "pcontent": ""
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to warehouse collection (3/6)...\n");
            db.collection('warehouse').insert({
                "ptitle": "32Gb Transcend JetFlash 700",
                "pshortdesc": "32Gb Transcend JetFlash 700, TS32GJF700, USB 3.0, Flash USB",
                "pfilename": "TDS00003",
                "pcategory": "/storage/usb_flash",
                "pcategory_id": "j1_3",
                "plang": "en",
                "pkeywords": "",
                "pdesc": "",
                "pimages": ["661e84ae052879073ed77cbf720989ad", "c157983ba9c37cde40edf5021517f223", "527fc0f513bc9505c77e2ae4c6656829"],
                "pamount": 10,
                "pamount_unlimited": 0,
                "pprice": 1220,
                "pweight": 0.04,
                "pcurs": "rur",
                "pcontent": ""
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to warehouse collection (4/6)...\n");
            db.collection('warehouse').insert({
                "ptitle": "L-Pro 3.5\" BOX (10 pcs)",
                "pshortdesc": "3.5\" double side, high capacity, formatted",
                "pfilename": "TDS00004",
                "pcategory": "/storage/floppy",
                "pcategory_id": "j1_4",
                "plang": "en",
                "pkeywords": "",
                "pdesc": "",
                "pimages": ["e686545d51dc3879f85c2a9c9b856568", "1da71e8209a3713ba4eac9f217316193"],
                "pchars": [{
                    "id": "capacity_mb",
                    "val": 1.44
                }, {
                    "id": "floppy_size",
                    "val": "3.5&quot;"
                }],
                "pcontent": "",
                "pamount": 5,
                "pamount_unlimited": 0,
                "pprice": 280,
                "pweight": 0.3,
                "pcurs": "rur"
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to warehouse collection (5/6)...\n");
            db.collection('warehouse').insert({
                "ptitle": "SDHC 32Gb Class 10 SanDisk Ultra",
                "pshortdesc": "SDHC 32Gb Class 10 SanDisk Ultra SDSDU-032G-U46",
                "pfilename": "TDS00005",
                "pcategory": "/storage/memory_cards/sd",
                "pcategory_id": "j1_8",
                "plang": "en",
                "pkeywords": "",
                "pdesc": "",
                "pimages": ["f437f67242c5b806e7e09c9b1e8de2fc"],
                "pamount": 5,
                "pamount_unlimited": 0,
                "pprice": 1430,
                "pweight": 0.2,
                "pcurs": "rur",
                "pcontent": ""
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to warehouse collection (6/6)...\n");
            db.collection('warehouse').insert({
                "ptitle": "Classic NES console",
                "pshortdesc": "Basic refurbished NES Nintendo System with controller, all hook-ups, and a new 72-pin",
                "pfilename": "TDS00006",
                "pcategory": "/game_console/nes",
                "pcategory_id": "j1_7",
                "plang": "en",
                "pkeywords": "",
                "pdesc": "",
                "pimages": ["76cdb7a45539a90a9c28556f1351b958"],
                "pamount": 0,
                "pamount_unlimited": 0,
                "pprice": 3000,
                "pweight": 1.5,
                "pcurs": "rur",
                "pcontent": ""
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: warehouse_categories\n");
            db.createCollection('warehouse_categories', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: warehouse_categories\n");
            ensure_indexes('warehouse_categories', ['oname'], null, null, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to warehouse_categories collection...\n");
            db.collection('warehouse_categories').insert({
                "oname": "categories_json",
                "ovalue": "[{\"id\":\"j1_1\",\"text\":\"/\",\"data\":null,\"parent\":\"#\",\"type\":\"root\"},{\"id\":\"j1_2\",\"text\":\"storage\",\"data\":{\"lang\":{\"en\":\"Storage\",\"ru\":\"Накопители\"}},\"parent\":\"j1_1\",\"type\":\"category\"},{\"id\":\"j1_3\",\"text\":\"usb_flash\",\"data\":{\"lang\":{\"en\":\"USB sticks\",\"ru\":\"Флешки\"}},\"parent\":\"j1_2\",\"type\":\"category\"},{\"id\":\"j1_4\",\"text\":\"floppy\",\"data\":{\"lang\":{\"en\":\"Floppy\",\"ru\":\"Дискеты\"}},\"parent\":\"j1_2\",\"type\":\"category\"},{\"id\":\"j1_5\",\"text\":\"memory_cards\",\"data\":{\"lang\":{\"en\":\"Memory cards\",\"ru\":\"Карты памяти\"}},\"parent\":\"j1_2\",\"type\":\"category\"},{\"id\":\"j1_8\",\"text\":\"sd\",\"data\":{\"lang\":{\"en\":\"SD / SDHC\",\"ru\":\"SD / SDHC\"}},\"parent\":\"j1_5\",\"type\":\"category\"},{\"id\":\"j1_9\",\"text\":\"microsd\",\"data\":{\"lang\":{\"en\":\"MicroSD\",\"ru\":\"MicroSD\"}},\"parent\":\"j1_5\",\"type\":\"category\"},{\"id\":\"j1_6\",\"text\":\"game_console\",\"data\":{\"lang\":{\"en\":\"Game console\",\"ru\":\"Игровые консоли\"}},\"parent\":\"j1_1\",\"type\":\"category\"},{\"id\":\"j1_7\",\"text\":\"nes\",\"data\":{\"lang\":{\"en\":\"NES\",\"ru\":\"NES\"}},\"parent\":\"j1_6\",\"type\":\"category\"}]"
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: warehouse_conf\n");
            db.createCollection('warehouse_conf', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: warehouse_conf\n");
            ensure_indexes('warehouse_conf', ['conf'], null, null, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to warehouse_conf collection (1/5)...\n");
            db.collection('warehouse_conf').insert({
                "conf": "items",
                "data": "[{\"id\":\"interface\",\"en\":\"Interface\",\"ru\":\"Интерфейс\"},{\"id\":\"color\",\"en\":\"Color\",\"ru\":\"Цвет\"},{\"id\":\"capacity_gb\",\"en\":\"Capacity (GB)\",\"ru\":\"Объем (Гб)\"},{\"id\":\"floppy_size\",\"en\":\"Floppy size\",\"ru\":\"Размер дискеты\"},{\"id\":\"capacity_mb\",\"en\":\"Capacity (MB)\",\"ru\":\"Объем (Мб)\"}]"
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to warehouse_conf collection (2/5)...\n");
            db.collection('warehouse_conf').insert({
                "conf": "collections",
                "data": "[{\"id\":\"storage\",\"items\":[\"capacity_gb\",\"interface\",\"color\"]},{\"id\":\"storage_floppy\",\"items\":[\"capacity_mb\",\"floppy_size\"]}]"
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to warehouse_conf collection (3/5)...\n");
            db.collection('warehouse_conf').insert({
                "conf": "curs",
                "data": "[{\"id\":\"rur\",\"exr\":\"1\",\"en\":\"RUR\",\"ru\":\"руб.\"}]"
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to warehouse_conf collection (4/5)...\n");
            db.collection('warehouse_conf').insert({
                "conf": "ship",
                "data": "[{\"id\":\"ruspost\",\"weight\":\"0.2\",\"amnt\":\"1\",\"price\":\"200\",\"en\":\"Russian Post\",\"ru\":\"Почта России\"},{\"id\":\"pickup_noaddr\",\"weight\":\"0\",\"amnt\":\"0\",\"price\":\"0\",\"en\":\"Pick up\",\"ru\":\"Самовывоз\"}]"
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to warehouse_conf collection (5/5)...\n");
            db.collection('warehouse_conf').insert({
                "conf": "misc",
                "data": "[{\"id\":\"weight_units\",\"en\":\"kg\",\"ru\":\"кг\"}]"
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: warehouse_addr\n");
            db.createCollection('warehouse_addr', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: warehouse_addr\n");
            ensure_indexes('warehouse_addr', ['user_id'], null, true, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: warehouse_orders\n");
            db.createCollection('warehouse_orders', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: warehouse_orders\n");
            ensure_indexes('warehouse_orders', ['order_id', 'order_status', 'order_timestamp', 'user_id'], null, null, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: counters\n");
            db.createCollection('counters', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding warehouse_orders item to counters collections...\n");
            db.collection('counters').insert({
                "_id": "warehouse_orders",
                "seq": 0
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        }
    ],
    function(err) {
        if (err) {
            console.log("\nInstallation failed");
            console.log(err);
            process.exit(1);
        }
        console.log("\nFinished");
        process.exit(code = 0);
    }
);

/*

 Helper functions

*/

var dummy = function() {};

function generateId(lngth) {
    if (!lngth) {
        lngth = 16;
    }
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    for (var i = 0; i < lngth; i++)
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    return text;
}

function ensure_indexes(col, ia, _opt, ow, callback) {
    var opt = {
        unique: false,
        background: true,
        dropDups: false,
        w: 1
    };
    if (_opt) opt = _opt;
    var _fns = [];
    for (var i = 0; i < ia.length; i++) {
        var i1 = {};
        i1[ia[i]] = 1;
        _fns.push({
            col: col,
            ix: i1
        });
        if (!ow) {
            var i2 = {};
            i2[ia[i]] = -1;
            _fns.push({
                col: col,
                ix: i2
            });
        }
    }
    async.every(_fns, function(fns, _callback) {
        db.collection(fns.col).ensureIndex(fns.ix, function() {
            _callback(true);
        });
    }, function(result) {
        callback();
    });
}
